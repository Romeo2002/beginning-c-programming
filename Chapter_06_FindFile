#include <iostream>
#include <string>
#include <io.h>

using namespace std;


class search_handle
{
	intptr_t handle;
public:
	search_handle() : handle(-1) {}
	search_handle( intptr_t p) : handle(p) {}
	void operator=(intptr_t p) {
		handle = p;
	}

	void close()
	{
		if (handle != -1) _findclose(handle);
		handle = 0;
	}
	search_handle(search_handle& h) = delete;
	void operator=(search_handle& h) = delete;

	search_handle(search_handle&& h) {
		close();
		handle = h.handle;
	}
	
	void operator=(search_handle&& h) {
		close();
		handle = h.handle;
	}

	operator bool() const {
		return (handle != -1);
	}

	operator intptr_t() const {
		return handle;
	}


	~search_handle() {
		close();
	}
};



class file_search {
	search_handle handle;
	string search;
public:
	file_search(const char* str) : search(str) {}
	file_search(const string& str) : search(str) {}
	const char* path() {
		return search.c_str();
	}
	void close() {
		handle.close();
	}
	bool next(string& ret)
	{
		_finddata_t find{};
		if (!handle) {
			handle = _findfirst(search.c_str(), &find);
			if (!handle) return false;
		}
		else
		{
			if (-1 == _findnext(handle, &find)) return false;
		}
		ret = find.name;
		return true;
	}
};

void usage() {
	cout << "Usage: search pattern" << endl;
	cout << "pattern is the file or folder to search for "
		<< "with or without wildcards * and ?" << endl;
}

int main(int argc, char* argv[]) {
	if (argc < 2) {
		usage();
		return 1;
	}

	file_search files(argv[1]);
	cout << "searching for " << files.path() << endl;
	string file;
	while (files.next(file)) {
		cout << file << endl;
	}
	return 0;
}
